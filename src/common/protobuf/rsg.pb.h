// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rsg.proto

#ifndef PROTOBUF_INCLUDED_rsg_2eproto
#define PROTOBUF_INCLUDED_rsg_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_rsg_2eproto 

namespace protobuf_rsg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_rsg_2eproto
namespace rsg {
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Command_AddActorCommand;
class Command_AddActorCommandDefaultTypeInternal;
extern Command_AddActorCommandDefaultTypeInternal _Command_AddActorCommand_default_instance_;
}  // namespace rsg
namespace google {
namespace protobuf {
template<> ::rsg::Command* Arena::CreateMaybeMessage<::rsg::Command>(Arena*);
template<> ::rsg::Command_AddActorCommand* Arena::CreateMaybeMessage<::rsg::Command_AddActorCommand>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace rsg {

// ===================================================================

class Command_AddActorCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rsg.Command.AddActorCommand) */ {
 public:
  Command_AddActorCommand();
  virtual ~Command_AddActorCommand();

  Command_AddActorCommand(const Command_AddActorCommand& from);

  inline Command_AddActorCommand& operator=(const Command_AddActorCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_AddActorCommand(Command_AddActorCommand&& from) noexcept
    : Command_AddActorCommand() {
    *this = ::std::move(from);
  }

  inline Command_AddActorCommand& operator=(Command_AddActorCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command_AddActorCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_AddActorCommand* internal_default_instance() {
    return reinterpret_cast<const Command_AddActorCommand*>(
               &_Command_AddActorCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Command_AddActorCommand* other);
  friend void swap(Command_AddActorCommand& a, Command_AddActorCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_AddActorCommand* New() const final {
    return CreateMaybeMessage<Command_AddActorCommand>(NULL);
  }

  Command_AddActorCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command_AddActorCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command_AddActorCommand& from);
  void MergeFrom(const Command_AddActorCommand& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_AddActorCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string actorName = 1;
  void clear_actorname();
  static const int kActorNameFieldNumber = 1;
  const ::std::string& actorname() const;
  void set_actorname(const ::std::string& value);
  #if LANG_CXX11
  void set_actorname(::std::string&& value);
  #endif
  void set_actorname(const char* value);
  void set_actorname(const char* value, size_t size);
  ::std::string* mutable_actorname();
  ::std::string* release_actorname();
  void set_allocated_actorname(::std::string* actorname);

  // string hostName = 2;
  void clear_hostname();
  static const int kHostNameFieldNumber = 2;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  #if LANG_CXX11
  void set_hostname(::std::string&& value);
  #endif
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // @@protoc_insertion_point(class_scope:rsg.Command.AddActorCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr actorname_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rsg.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  enum TypeCase {
    kAddActor = 1,
    kStart = 2,
    kKill = 3,
    kStatus = 4,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(NULL);
  }

  Command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Command_AddActorCommand AddActorCommand;

  // accessors -------------------------------------------------------

  // .rsg.Command.AddActorCommand addActor = 1;
  bool has_addactor() const;
  void clear_addactor();
  static const int kAddActorFieldNumber = 1;
  private:
  const ::rsg::Command_AddActorCommand& _internal_addactor() const;
  public:
  const ::rsg::Command_AddActorCommand& addactor() const;
  ::rsg::Command_AddActorCommand* release_addactor();
  ::rsg::Command_AddActorCommand* mutable_addactor();
  void set_allocated_addactor(::rsg::Command_AddActorCommand* addactor);

  // bool start = 2;
  private:
  bool has_start() const;
  public:
  void clear_start();
  static const int kStartFieldNumber = 2;
  bool start() const;
  void set_start(bool value);

  // bool kill = 3;
  private:
  bool has_kill() const;
  public:
  void clear_kill();
  static const int kKillFieldNumber = 3;
  bool kill() const;
  void set_kill(bool value);

  // bool status = 4;
  private:
  bool has_status() const;
  public:
  void clear_status();
  static const int kStatusFieldNumber = 4;
  bool status() const;
  void set_status(bool value);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:rsg.Command)
 private:
  void set_has_addactor();
  void set_has_start();
  void set_has_kill();
  void set_has_status();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::rsg::Command_AddActorCommand* addactor_;
    bool start_;
    bool kill_;
    bool status_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_rsg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command_AddActorCommand

// string actorName = 1;
inline void Command_AddActorCommand::clear_actorname() {
  actorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command_AddActorCommand::actorname() const {
  // @@protoc_insertion_point(field_get:rsg.Command.AddActorCommand.actorName)
  return actorname_.GetNoArena();
}
inline void Command_AddActorCommand::set_actorname(const ::std::string& value) {
  
  actorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rsg.Command.AddActorCommand.actorName)
}
#if LANG_CXX11
inline void Command_AddActorCommand::set_actorname(::std::string&& value) {
  
  actorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rsg.Command.AddActorCommand.actorName)
}
#endif
inline void Command_AddActorCommand::set_actorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  actorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rsg.Command.AddActorCommand.actorName)
}
inline void Command_AddActorCommand::set_actorname(const char* value, size_t size) {
  
  actorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rsg.Command.AddActorCommand.actorName)
}
inline ::std::string* Command_AddActorCommand::mutable_actorname() {
  
  // @@protoc_insertion_point(field_mutable:rsg.Command.AddActorCommand.actorName)
  return actorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command_AddActorCommand::release_actorname() {
  // @@protoc_insertion_point(field_release:rsg.Command.AddActorCommand.actorName)
  
  return actorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command_AddActorCommand::set_allocated_actorname(::std::string* actorname) {
  if (actorname != NULL) {
    
  } else {
    
  }
  actorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actorname);
  // @@protoc_insertion_point(field_set_allocated:rsg.Command.AddActorCommand.actorName)
}

// string hostName = 2;
inline void Command_AddActorCommand::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command_AddActorCommand::hostname() const {
  // @@protoc_insertion_point(field_get:rsg.Command.AddActorCommand.hostName)
  return hostname_.GetNoArena();
}
inline void Command_AddActorCommand::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rsg.Command.AddActorCommand.hostName)
}
#if LANG_CXX11
inline void Command_AddActorCommand::set_hostname(::std::string&& value) {
  
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rsg.Command.AddActorCommand.hostName)
}
#endif
inline void Command_AddActorCommand::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rsg.Command.AddActorCommand.hostName)
}
inline void Command_AddActorCommand::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rsg.Command.AddActorCommand.hostName)
}
inline ::std::string* Command_AddActorCommand::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:rsg.Command.AddActorCommand.hostName)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command_AddActorCommand::release_hostname() {
  // @@protoc_insertion_point(field_release:rsg.Command.AddActorCommand.hostName)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command_AddActorCommand::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:rsg.Command.AddActorCommand.hostName)
}

// -------------------------------------------------------------------

// Command

// .rsg.Command.AddActorCommand addActor = 1;
inline bool Command::has_addactor() const {
  return type_case() == kAddActor;
}
inline void Command::set_has_addactor() {
  _oneof_case_[0] = kAddActor;
}
inline void Command::clear_addactor() {
  if (has_addactor()) {
    delete type_.addactor_;
    clear_has_type();
  }
}
inline const ::rsg::Command_AddActorCommand& Command::_internal_addactor() const {
  return *type_.addactor_;
}
inline ::rsg::Command_AddActorCommand* Command::release_addactor() {
  // @@protoc_insertion_point(field_release:rsg.Command.addActor)
  if (has_addactor()) {
    clear_has_type();
      ::rsg::Command_AddActorCommand* temp = type_.addactor_;
    type_.addactor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::rsg::Command_AddActorCommand& Command::addactor() const {
  // @@protoc_insertion_point(field_get:rsg.Command.addActor)
  return has_addactor()
      ? *type_.addactor_
      : *reinterpret_cast< ::rsg::Command_AddActorCommand*>(&::rsg::_Command_AddActorCommand_default_instance_);
}
inline ::rsg::Command_AddActorCommand* Command::mutable_addactor() {
  if (!has_addactor()) {
    clear_type();
    set_has_addactor();
    type_.addactor_ = CreateMaybeMessage< ::rsg::Command_AddActorCommand >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:rsg.Command.addActor)
  return type_.addactor_;
}

// bool start = 2;
inline bool Command::has_start() const {
  return type_case() == kStart;
}
inline void Command::set_has_start() {
  _oneof_case_[0] = kStart;
}
inline void Command::clear_start() {
  if (has_start()) {
    type_.start_ = false;
    clear_has_type();
  }
}
inline bool Command::start() const {
  // @@protoc_insertion_point(field_get:rsg.Command.start)
  if (has_start()) {
    return type_.start_;
  }
  return false;
}
inline void Command::set_start(bool value) {
  if (!has_start()) {
    clear_type();
    set_has_start();
  }
  type_.start_ = value;
  // @@protoc_insertion_point(field_set:rsg.Command.start)
}

// bool kill = 3;
inline bool Command::has_kill() const {
  return type_case() == kKill;
}
inline void Command::set_has_kill() {
  _oneof_case_[0] = kKill;
}
inline void Command::clear_kill() {
  if (has_kill()) {
    type_.kill_ = false;
    clear_has_type();
  }
}
inline bool Command::kill() const {
  // @@protoc_insertion_point(field_get:rsg.Command.kill)
  if (has_kill()) {
    return type_.kill_;
  }
  return false;
}
inline void Command::set_kill(bool value) {
  if (!has_kill()) {
    clear_type();
    set_has_kill();
  }
  type_.kill_ = value;
  // @@protoc_insertion_point(field_set:rsg.Command.kill)
}

// bool status = 4;
inline bool Command::has_status() const {
  return type_case() == kStatus;
}
inline void Command::set_has_status() {
  _oneof_case_[0] = kStatus;
}
inline void Command::clear_status() {
  if (has_status()) {
    type_.status_ = false;
    clear_has_type();
  }
}
inline bool Command::status() const {
  // @@protoc_insertion_point(field_get:rsg.Command.status)
  if (has_status()) {
    return type_.status_;
  }
  return false;
}
inline void Command::set_status(bool value) {
  if (!has_status()) {
    clear_type();
    set_has_status();
  }
  type_.status_ = value;
  // @@protoc_insertion_point(field_set:rsg.Command.status)
}

inline bool Command::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Command::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Command::TypeCase Command::type_case() const {
  return Command::TypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_rsg_2eproto
