# Make sure tesh is found.
tesh = find_program('tesh', required : true)

# The environment into which the tests are executed.
test_env = environment()
test_env.prepend('PATH', meson.build_root(), meson.build_root() + '/tests')
test_env.prepend('LD_LIBRARY_PATH', meson.build_root())
test_env.set('TEST_DIR', meson.current_source_dir())
test_env.set('INTERPROCESS_DELAY', get_option('test_interprocess_delay'))
test_env.set('START_DELAY', get_option('test_start_delay'))

# Build some client programs.
executable('client-hello', ['clients/hello.cpp'], dependencies: librsg_dep)
executable('client-hello-manual-connect', ['clients/hello_manual_connect.cpp'], dependencies: librsg_dep)
executable('client-segfault', ['clients/segfault.cpp'], dependencies: librsg_dep)
executable('client-sleep-for', ['clients/sleep_for.cpp'], dependencies: librsg_dep)
executable('client-sleep-until', ['clients/sleep_until.cpp'], dependencies: librsg_dep)
executable('client-actor-create', ['clients/actor_create.cpp'], dependencies: librsg_dep)
executable('client-actor-create-connection-hooks', ['clients/actor_create_connection_hooks.cpp'], dependencies: librsg_dep)
executable('client-actor-create-invalid', ['clients/actor_create_invalid.cpp'], dependencies: librsg_dep)
executable('client-actor-create-thread-race', ['clients/actor_create_thread_race.cpp'], dependencies: librsg_dep)
executable('client-actor-execute', ['clients/actor_execute.cpp'], dependencies: librsg_dep)
executable('client-actor-fork', ['clients/actor_fork.cpp'], dependencies: librsg_dep)
executable('client-actor-whoami', ['clients/actor_whoami.cpp'], dependencies: librsg_dep)
executable('client-actor-yield', ['clients/actor_yield.cpp'], dependencies: librsg_dep)
executable('client-comm-waitany', ['clients/comm_waitany.cpp'], dependencies: librsg_dep)
executable('client-host-finder', ['clients/host_finder.cpp'], dependencies: librsg_dep)
executable('client-mailbox-sender', ['clients/mailbox_sender.cpp'], dependencies: librsg_dep)
executable('client-mailbox-sender-async', ['clients/mailbox_sender_async.cpp'], dependencies: librsg_dep)
executable('client-mailbox-receiver', ['clients/mailbox_receiver.cpp'], dependencies: librsg_dep)
executable('client-mailbox-receiver-async', ['clients/mailbox_receiver_async.cpp'], dependencies: librsg_dep)
executable('client-malicious-actor-id', ['clients/malicious_actor_id.cpp'], dependencies: librsg_dep)
executable('client-malicious-port', ['clients/malicious_port.cpp'], dependencies: librsg_dep)
executable('client-mutant', ['clients/mutant.cpp'], dependencies: librsg_dep)
executable('client-ompi1', ['clients/ompi1.cpp'], dependencies: librsg_dep)
executable('client-s4u-actor-create', ['s4u-clone/actor-create.cpp'], dependencies: librsg_dep)
executable('client-s4u-actor-join', ['s4u-clone/actor-join.cpp'], dependencies: librsg_dep)
executable('client-s4u-synchro-condition-variable', ['s4u-clone/synchro-condition-variable.cpp'], dependencies: librsg_dep)
executable('client-s4u-synchro-mutex', ['s4u-clone/synchro-mutex.cpp'], dependencies: librsg_dep)

# Define some tests
test('rsg-cli add-actor', tesh, env: test_env, args: [files('rsg-cli/add-actor.tesh')])
test('rsg-cli kill', tesh, env: test_env, args: [files('rsg-cli/kill.tesh')])
test('rsg-cli start', tesh, env: test_env, args: [files('rsg-cli/start.tesh')])
test('rsg-cli status', tesh, env: test_env, args: [files('rsg-cli/status.tesh')])
test('rsg-cli status-retry-timeout', tesh, env: test_env, args: [files('rsg-cli/status-retry-timeout.tesh')])
test('rsg-cli serve-add-actor-bad-cmd', tesh, env: test_env, args: [files('rsg-cli/serve-add-actor-bad-cmd.tesh')])
test('rsg-cli serve-add-actor-start', tesh, env: test_env, args: [files('rsg-cli/serve-add-actor-start.tesh')])
test('rsg-cli serve-add-actor-start-manual-connect', tesh, env: test_env, args: [files('rsg-cli/serve-add-actor-start-manual-connect.tesh')])
test('rsg-cli serve-add-actor-start-segfault', tesh, env: test_env, args: [files('rsg-cli/serve-add-actor-start-segfault.tesh')])
test('rsg-cli serve-daemon', tesh, env: test_env, args: [files('rsg-cli/serve-daemon.tesh')])
test('rsg-cli serve-kill', tesh, env: test_env, args: [files('rsg-cli/serve-kill.tesh')])
test('actor sleep_for', tesh, env: test_env, args: [files('actor/sleep_for.tesh')])
test('actor sleep_until', tesh, env: test_env, args: [files('actor/sleep_until.tesh')])
test('actor create', tesh, env: test_env, args: [files('actor/create.tesh')])
test('actor create-connection-hooks', tesh, env: test_env, args: [files('actor/create-connection-hooks.tesh')])
test('actor create-invalid', tesh, env: test_env, args: [files('actor/create-invalid.tesh')])
test('actor create-thread-race', tesh, env: test_env, args: [files('actor/create-thread-race.tesh')])
test('actor execute', tesh, env: test_env, args: [files('actor/execute.tesh')])
test('actor fork', tesh, env: test_env, args: [files('actor/fork.tesh')])
test('actor whoami', tesh, env: test_env, args: [files('actor/whoami.tesh')])
test('actor whoami-nofork', tesh, env: test_env, args: [files('actor/whoami-nofork.tesh')])
test('actor yield', tesh, env: test_env, args: [files('actor/yield.tesh')])
test('comm waitany', tesh, env: test_env, args: [files('comm/waitany.tesh')])
test('host finder', tesh, env: test_env, args: [files('host/finder.tesh')])
test('mailbox send-receive', tesh, env: test_env, args: [files('mailbox/send-receive.tesh')])
test('mailbox asyncsend-receive', tesh, env: test_env, args: [files('mailbox/asyncsend-receive.tesh')])
test('mailbox send-asyncreceive', tesh, env: test_env, args: [files('mailbox/send-asyncreceive.tesh')])
test('mailbox asyncsend-asyncreceive', tesh, env: test_env, args: [files('mailbox/asyncsend-asyncreceive.tesh')])
test('malicious actor-id', tesh, env: test_env, args: [files('malicious/actor-id.tesh')])
test('malicious port', tesh, env: test_env, args: [files('malicious/port.tesh')])
test('misc process-mutation', tesh, env: test_env, args: [files('misc/process-mutation.tesh')])
test('use-case connection-burst', tesh, env: test_env, args: [files('use-case/connection-burst.tesh')])
test('use-case ompi1', tesh, env: test_env, args: [files('use-case/ompi1.tesh')])
test('s4u-clone actor-create', tesh, env: test_env, args: [files('s4u-clone/actor-create.tesh')])
test('s4u-clone actor-join', tesh, env: test_env, args: [files('s4u-clone/actor-join.tesh')])
test('s4u-clone synchro-condition-variable', tesh, env: test_env, args: [files('s4u-clone/synchro-condition-variable.tesh')])
test('s4u-clone synchro-mutex', tesh, env: test_env, args: [files('s4u-clone/synchro-mutex.tesh')])
